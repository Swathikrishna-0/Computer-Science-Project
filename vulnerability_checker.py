import requests

def fetch_cve_data(package_name, version):
    """
    Fetches CVE data for a given package name and version from the NVD API.
    
    Args:
    - package_name (str): Name of the package (e.g., 'requests').
    - version (str): Version of the package (e.g., '2.25.1').
    
    Returns:
    - list: CVE data if found, otherwise None.
    """
    # Clean the version string (strip any unwanted characters like carriage returns or newlines)
    version = version.strip()  # Strip leading/trailing whitespace, newlines, or carriage returns
    
    # Construct the CPE name (Common Platform Enumeration)
    cpe_name = f"cpe:2.3:a:{package_name}:{package_name}:{version}:*:*:*:*:*:*:*"
    
    # Construct the URL for the NVD CVE API
    url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName={cpe_name}"

    try:
        # Send GET request to fetch CVE data
        response = requests.get(url)
        response.raise_for_status()  # Raises an HTTPError for bad responses
        
        # Parse the JSON response
        cve_data = response.json()

        # Check if vulnerabilities exist in the response
        if cve_data.get('vulnerabilities', []):
            return cve_data['vulnerabilities']
        else:
            print(f"No vulnerabilities found for {package_name} version {version}.")
            return None
    
    except requests.exceptions.RequestException as e:
        print(f"Error fetching CVE data for {package_name} version {version}: {e}")
        return None

    
def classify_risk(cve_data):
    """
    Classifies the risk level of a given CVE based on its severity.

    Args:
    - cve_data (dict): The CVE data retrieved from the API.

    Returns:
    - str: The risk level ('Low', 'Medium', 'High').
    """
    if not cve_data:
        return "No vulnerabilities found"
    
    # Default risk is low
    risk = "Low"
    
    # Iterate through the CVE data to assess severity
    for cve in cve_data:
        # Get the CVSS base score to determine risk
        score = cve.get('cvss', {}).get('baseScore', 0)
        
        # Classify risk based on CVSS score
        if score >= 7.0:
            risk = "High"
        elif score >= 4.0:
            risk = "Medium"
    
    return risk

