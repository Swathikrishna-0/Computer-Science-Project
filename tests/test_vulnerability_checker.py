import sys
import os
import unittest
import requests_mock

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from vulnerability_checker import fetch_cve_data

class TestVulnerabilityChecker(unittest.TestCase):

    @requests_mock.Mocker()
    def test_fetch_cve_data(self, mock_request):
        package = "requests"
        version = "2.19.0"
        
        mocked_response = {
            "vulnerabilities": [
                {
                    "cve": {
                        "CVE_data_meta": {"ID": "CVE-2018-18074"},
                        "description": {
                            "description_data": [{"value": "Improper handling of session cookies."}]
                        }
                    },
                    "publishedDate": "2018-10-08",
                    "lastModifiedDate": "2019-06-27",
                    "cvss": {"baseScore": 7.5}
                }
            ]
        }

        mock_url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName=cpe:2.3:a:{package}:{package}:{version}:*:*:*:*:*:*:*"
        mock_request.get(mock_url, json=mocked_response)

        cve_data = fetch_cve_data(package, version)
        
        self.assertIsInstance(cve_data, list)
        self.assertGreater(len(cve_data), 0)
        self.assertEqual(cve_data[0]['cve']['CVE_data_meta']['ID'], "CVE-2018-18074")

if __name__ == "__main__":
    unittest.main()
